#!/usr/bin/env python

import datetime, json, urllib2, time
import boto3
from operator import itemgetter
from time import gmtime, strftime
from datetime import datetime, timedelta

AWS_ACCESS_KEY_ID = '<AWS_ACCESS_KEY_ID>'
AWS_SECRET_ACCESS_KEY = '<AWS_ACCESS_KEY>'

sumoEndpoint = 'SUMO_LOGIC_ENDPOINT'

#regions = ["us-east-1", "us-west-1", "us-west-2", "ap-northeast-1", "ap-southeast-1", "ap-southeast-2", "eu-west-1", "sa-east-1"]
regions = ["us-east-1"]

ec2_metrics = [ 'CPUUtilization', 'NetworkIn', 'NetworkOut', 'DiskReadBytes', 'DiskReadOps', 'DiskWriteBytes', 'DiskWriteOps']
linux_metrics = [ 'DiskSpaceUtilization', 'MemoryUtilization', 'SwapUtilization' ]

#configure logging - http://boto3.readthedocs.org/en/latest/reference/core/boto3.html

d = {}

### CONSTANTS ###
# Start and end times for the Cloudwatch query
query_end = datetime.utcnow()
query_start = query_end - timedelta(minutes=9)


### FUNCTIONS ###
def convert(input):
    """Covert from unicode to utf8"""
    if isinstance(input, dict):
        return {convert(key): convert(value) for key, value in input.iteritems()}
    elif isinstance(input, list):
        return [convert(element) for element in input]
    elif isinstance(input, unicode):
        return input.encode('utf-8')
    else:
        return input

def push_to_sumo(logdata):
    """Sends given log message to Hosted Collector"""
    logdata = str(logdata) + '\n'
    print urllib2.urlopen(sumoEndpoint, logdata).read()

def get_ec2_metrics(metric, region, id):
    """Pull instance metrics from CloudWatch."""
    cw = boto3.client('cloudwatch', region_name=region, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)

    results = cw.get_metric_statistics(
                            Namespace='AWS/EC2',
                            MetricName=metric,
                            Dimensions=[{'Name': 'InstanceId', 'Value': id}],
                            StartTime=query_start,
                            EndTime=query_end,
                            Period=300,
                            Statistics=['Average'])

    datapoints = convert(results['Datapoints'])

    if datapoints:
        datapoint = datapoints[0]
        del datapoint['Timestamp']

        l = [datapoint]
        d[metric] = l
    else:
        d[metric] = []
        
# Define Event Handler
def lambda_handler(event, context):
    for region in regions:
        s = boto3.session.Session(region_name=region, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)
        ec2 = s.resource('ec2')
    
        instances = ec2.instances.filter(
            Filters=[{'Name': 'instance-state-name', 'Values': ['running']}])

        for i in instances:
            c = boto3.client('ec2', region_name=region, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)
            d = convert(c.describe_instances(InstanceIds=[i.id]))
    
            d['timestamp'] = str(query_start)
            d['region'] = region
    
            for metric in ec2_metrics:
                get_ec2_metrics(metric, region, i.id)
    
            print d
            push_to_sumo(d)
    
